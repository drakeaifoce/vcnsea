generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol", "fullTextSearch"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  SUPERADMIN
  CONTENT_ADMIN
  COMPANY_ADMIN
  COMPANY_WORKER
  USER
}

model SuperAdmin {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  Role     Role
}

model ContentAdmin {
  id         Int    @id @default(autoincrement())
  email      String @unique
  password   String
  Role       Role
  firstName  String
  secondName String
}

model Student {
  id              Int              @id @default(autoincrement())
  firstName       String
  secondName      String
  email           String           @unique
  password        String
  avatar          String?
  specialty       String?
  city            String?
  website         String?
  quote           String?
  about           String?
  Role            Role
  workExperiences WorkExperience[]
  Education       Education[]
  Certificates    Certificate[]
  Responses       Application[]
  Appointment     Appointment[]
  Offers          Offer[]
}

model WorkExperience {
  id           Int      @id @default(autoincrement())
  company_name String
  company_link String
  position     String
  city         String
  start_date   String
  end_date     String
  description  String
  Student      Student? @relation(fields: [studentId], references: [id])
  studentId    Int
}

model Education {
  id              Int      @id @default(autoincrement())
  startDate       String
  endDate         String
  institutionName String
  degreeName      String
  location        String
  description     String
  link            String
  Student         Student? @relation(fields: [studentId], references: [id])
  studentId       Int
}

model Certificate {
  id              Int      @id @default(autoincrement())
  certificateName String
  year            String
  description     String
  link            String
  Student         Student? @relation(fields: [studentId], references: [id])
  studentId       Int
}

model Company {
  id             Int           @id @default(autoincrement())
  company_name   String
  BIN            String
  city           String
  description    String
  contact        String
  avatar         String?
  Vacancies      Vacancy[]
  Appointment    Appointment[]
  CompanyAdmin   CompanyAdmin? @relation(fields: [companyAdminId], references: [id])
  companyAdminId Int

  isVerified         Boolean
  verificationStatus String

  CompanyWorkers CompanyWorker[]
}

model CompanyAdmin {
  id         Int       @id @default(autoincrement())
  firstName  String
  secondName String
  email      String    @unique
  position   String
  password   String
  Role       Role
  Company    Company[]
}

model CompanyWorker {
  id         Int      @id @default(autoincrement())
  firstName  String
  secondName String
  email      String   @unique
  position   String
  password   String
  Role       Role
  Company    Company? @relation(fields: [companyId], references: [id])
  companyId  Int

  Offers Offer[]
}

model Vacancy {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now()) @map("created_at")
  floorSalary   Int
  ceilingSalary Int
  title         String
  description   String
  location      String
  company       Company?      @relation(fields: [companyId], references: [id])
  companyId     Int
  Applications  Application[]
  Appointment   Appointment[]
  Tags          Tag[]
}

model Application {
  id        Int      @id @default(autoincrement())
  status    String
  Student   Student? @relation(fields: [studentId], references: [id])
  studentId Int
  Vacancy   Vacancy? @relation(fields: [vacancyId], references: [id], onDelete: Cascade)
  vacancyId Int?
}

model Appointment {
  id        Int      @id @default(autoincrement())
  date      String
  time      String
  link      String
  Student   Student? @relation(fields: [studentId], references: [id])
  studentId Int
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int
  Vacancy   Vacancy? @relation(fields: [vacancyId], references: [id], onDelete: Cascade)
  vacancyId Int?
}

model Offer {
  id              Int            @id @default(autoincrement())
  status          String
  Student         Student?       @relation(fields: [studentId], references: [id])
  studentId       Int?
  CompanyWorker   CompanyWorker? @relation(fields: [companyWorkerId], references: [id])
  companyWorkerId Int?
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String
  type      String
  Vacancies Vacancy[]
}
