generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  COMPANY
  USER
}

model Student {
  id              Int              @id @default(autoincrement())
  firstName       String
  secondName      String
  email           String           @unique
  password        String
  avatar          String?
  specialty       String?
  city            String?
  website         String?
  quote           String?
  about           String?
  Role            Role
  workExperiences WorkExperience[]
  Responses       Application[]
  Appointment     Appointment[]
}

model WorkExperience {
  id           Int      @id @default(autoincrement())
  company_name String
  company_link String
  position     String
  city         String
  start_date   String
  end_date     String
  description  String
  Student      Student? @relation(fields: [studentId], references: [id])
  studentId    Int
}

model Company {
  id           Int           @id @default(autoincrement())
  firstName    String
  secondName   String
  email        String        @unique
  position     String
  company_name String
  BIN          String
  city         String
  description  String
  avatar       String?
  Role         Role
  password     String
  Vacancies    Vacancy[]
  Appointment  Appointment[]
}

model Vacancy {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now()) @map("created_at")
  floorSalary   Int
  ceilingSalary Int
  title         String
  description   String
  location      String
  company       Company?      @relation(fields: [companyId], references: [id])
  companyId     Int
  Applications  Application[]
  Appointment   Appointment[]
}

model Application {
  id        Int      @id @default(autoincrement())
  status    String
  Student   Student? @relation(fields: [studentId], references: [id])
  studentId Int
  Vacancy   Vacancy? @relation(fields: [vacancyId], references: [id], onDelete: Cascade)
  vacancyId Int?
}

model Appointment {
  id        Int      @id @default(autoincrement())
  date      String
  time      String
  link      String
  Student   Student? @relation(fields: [studentId], references: [id])
  studentId Int
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int
  Vacancy   Vacancy? @relation(fields: [vacancyId], references: [id], onDelete: Cascade)
  vacancyId Int?
}
