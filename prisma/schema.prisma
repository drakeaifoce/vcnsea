generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Student {
  id              Int              @id @default(autoincrement())
  firstName       String
  secondName      String
  email           String
  password        String
  avatar          String?
  specialty       String?
  city            String?
  website         String?
  quote           String?
  about           String?
  workExperiences WorkExperience[]
  Responses       Response[]
  CV              CV?
}

model WorkExperience {
  id           Int      @id @default(autoincrement())
  company_name String
  company_link String
  city         String
  start_date   String
  end_date     String
  description  String
  Student      Student? @relation(fields: [studentId], references: [id])
  studentId    Int?
}

model Company {
  id           Int       @id @default(autoincrement())
  firstName    String
  secondName   String
  email        String
  position     String
  company_name String
  BIN          String
  city         String
  description  String
  avatar       String?
  password     String
  Vacancies    Vacancy[]
}

model Vacancy {
  id            Int        @id @default(autoincrement())
  floorSalary   String
  ceilingSalary String
  title         String
  description   String
  company       Company    @relation(fields: [companyId], references: [id])
  companyId     Int
  Responses     Response[]
  Tags          Tag[]
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String
  Vacancies Vacancy[]
}

model CV {
  id           Int     @id @default(autoincrement())
  cv_file_path String
  skills       String
  student      Student @relation(fields: [studentId], references: [id])
  studentId    Int     @unique
}

model Response {
  id        Int      @id @default(autoincrement())
  status    String
  Student   Student? @relation(fields: [StudentId], references: [id])
  StudentId Int?
  vacancy   Vacancy? @relation(fields: [vacancyId], references: [id])
  vacancyId Int?
}
